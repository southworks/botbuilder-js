/**
 * Microsoft Bot Token API - V3.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: token
 * Contact: botframework@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

const fetch = (new Function('require', 'if (!this.hasOwnProperty("fetch")) { return require("node-fetch"); } else { return this.fetch; }'))(require);
import * as HttpStatus from 'http-status-codes';
import http = require('http');
import * as Models from './model';

/* tslint:disable:no-unused-locals */

import { ObjectSerializer } from './model/models';
import { CustomMicrosoftAppCredentials } from '../auth'
import { CustomTokenApiClient } from './customTokenApiClient';



// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum BotSignInApiApiKeys {
}

export class BotSignInApi {
    protected _basePath: string;
    protected defaultHeaders = {};
    protected credentials: CustomMicrosoftAppCredentials;
    protected userAgent: string;
    
    constructor(client: CustomTokenApiClient){
        this.credentials = client.credentials;
        this.defaultHeaders = {"content-type": client.requestContentType};
        this.userAgent = client.userAgent;
        this.basePath = client.baseUri;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    /**
     * 
     * @param state 
     * @param codeChallenge 
     * @param emulatorUrl 
     * @param finalRedirect 
     */
    public async getSignInUrl (state: string, options: Models.BotSignInGetSignInUrlOptionalParams = {}) : Promise<Models.BotSignInGetSignInUrlResponse> {
        const localPath = this.basePath + '/api/botsignin/GetSignInUrl';
        let localQueryParameters = {};
        let localHeaderParams = Object.assign({}, this.defaultHeaders);    

        // verify required parameter 'state' is not null or undefined
        if (state === null || state === undefined) {
            throw new Error('Required parameter state was null or undefined when calling botSignInGetSignInUrl.');
        }

        if (state !== undefined) {
            localQueryParameters['state'] = ObjectSerializer.serialize(state, "string");
        }

        if (options.codeChallenge !== undefined) {
            localQueryParameters['code_challenge'] = ObjectSerializer.serialize(options.codeChallenge, "string");
        }

        if (options.emulatorUrl !== undefined) {
            localQueryParameters['emulatorUrl'] = ObjectSerializer.serialize(options.emulatorUrl, "string");
        }

        if (options.finalRedirect !== undefined) {
            localQueryParameters['finalRedirect'] = ObjectSerializer.serialize(options.finalRedirect, "string");
        }

        if (options.channelId !== undefined) {
            localQueryParameters['channelId'] = ObjectSerializer.serialize(options.channelId, "string");
        }

        let url = new URL(localPath)
        Object.keys(localQueryParameters).forEach(key => url.searchParams.append(key, localQueryParameters[key]))            
        Object.assign(localHeaderParams, options.headers);

        let requestOptions = {
            method: 'GET',
            uri: localPath,
            headers: localHeaderParams,            
            json: true,
            proxy: options.proxyOptions,
            userAgent: this.userAgent
        };

        await this.credentials.signRequest(requestOptions); 
              
        return new Promise<Models.BotSignInGetSignInUrlResponse>((resolve, reject) => {
            fetch(url, requestOptions).then(response => {         
                let httpResponse: http.IncomingMessage = response;
                
                if (response.status &&  response.status >= HttpStatus.OK && response.status < HttpStatus.MULTIPLE_CHOICES) { 
                    response.text().then(result => {
                        let _body: string = ObjectSerializer.deserialize(result, "string");
                        let _bodyAsText: string = _body == undefined? "" : ObjectSerializer.deserialize(result, "string");
                        let _response = Object.assign(httpResponse, {bodyAsText: _bodyAsText, parsedBody: _body}); 

                        resolve({body: _body, _response: _response});
                    });
                } else {
                    let toReturn: Models.BotSignInGetSignInUrlResponse = Object.assign({_response: httpResponse});   
                    resolve(toReturn);
                }                
            });
        });
    }
}
